{"version":3,"sources":["assets/download.png","components/Avatar.js","components/Sidebar.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","injectSheet","root","width","borderRadius","boxShadow","_ref","classes","className","other","Object","objectWithoutProperties","react_default","a","createElement","assign","src","avatar","alt","classNames","Sidebar","style","backgroundColor","height","display","alignItems","flexDirection","padding","components_Avatar","marginBottom","color","textTransform","fontSize","fontWeight","Icon_default","path","mdiAccount","size","margin","mdiNewspaper","mdiPoll","mdiFileDocumentOutline","mdiEmail","App","components_Sidebar","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac36afa8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/download.57d91ebb.png\";","import React from 'react';\nimport injectSheet from 'react-jss';\nimport classNames from 'classnames';\n\nimport avatar from '../assets/download.png';\n\nconst styles = {\n  root: {\n    width: '152px',\n    borderRadius: '50%',\n    boxShadow: '0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 20px 31px 3px rgba(0, 0, 0, 0.14),0px 8px 38px 7px rgba(0, 0, 0, 0.12)',\n  },\n};\n\nfunction Avatar({ classes, className, ...other }) {\n  return (\n    <img src={avatar} alt=\"Profile\" className={classNames(classes.root, className)} {...other} />\n  );\n}\n\nexport default injectSheet(styles)(Avatar);\n","import React from 'react';\nimport Avatar from './Avatar';\n\nimport Icon from '@mdi/react'\nimport { mdiAccount, mdiFileDocumentOutline, mdiEmail, mdiNewspaper, mdiPoll } from '@mdi/js'\n\nfunction Sidebar() {\n  return(\n    <aside style={{\n      backgroundColor: '#283e4a',\n      width: '20%',\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      flexDirection: 'column',\n    }}>\n      <div style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        padding: '20px 0',\n      }}>\n        <Avatar style={{\n          marginBottom: '15px',\n        }}/>\n        <p style={{\n          color: '#c7d1d8',\n          marginBottom: '10px',\n          textTransform: 'uppercase',\n          fontSize: '20px',\n          fontWeight: 'bold',\n        }}>Alfredo Quintero</p>\n        <p style={{\n          color: '#c7d1d8',\n          textTransform: 'uppercase',\n        }}>Full Stack Developer</p>\n      </div>\n      <div style={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n      }}>\n        <div style={{\n          padding: '8px 0',\n          color: '#c7d1d8',\n          display: 'flex',\n          alignItems: 'center'\n        }}>\n          <Icon path={mdiAccount}\n            size={1.2}\n            color=\"#c7d1d8\"\n            style={{\n              margin: '0 15px',\n            }}/>\n          <span>About</span>\n        </div>\n        <div style={{\n          padding: '8px 0',\n          color: '#c7d1d8',\n          display: 'flex',\n          alignItems: 'center'\n        }}>\n          <Icon path={mdiNewspaper}\n            size={1.2}\n            color=\"#c7d1d8\"\n            style={{\n              margin: '0 15px',\n            }}/>\n          <span>Projects</span>\n        </div>\n        <div style={{\n          padding: '8px 0',\n          color: '#c7d1d8',\n          display: 'flex',\n          alignItems: 'center'\n        }}>\n          <Icon path={mdiPoll}\n            size={1.2}\n            color=\"#c7d1d8\"\n            style={{\n              margin: '0 15px',\n            }}/>\n          <span>Skills</span>\n        </div>\n        <div style={{\n          padding: '8px 0',\n          color: '#c7d1d8',\n          display: 'flex',\n          alignItems: 'center'\n        }}>\n          <Icon path={mdiFileDocumentOutline}\n            size={1.2}\n            color=\"#c7d1d8\"\n            style={{\n              margin: '0 15px',\n            }}/>\n          <span>Resume</span>\n        </div>\n        <div style={{\n          padding: '8px 0',\n          color: '#c7d1d8',\n          display: 'flex',\n          alignItems: 'center'\n        }}>\n          <Icon path={mdiEmail}\n            size={1.2}\n            color=\"#c7d1d8\"\n            style={{\n              margin: '0 15px',\n            }}/>\n          <span>Contact</span>\n        </div>\n      </div>\n    </aside>\n  );\n}\n\nexport default Sidebar;\n","import React, { Component } from 'react';\nimport Avatar from './Avatar';\nimport Sidebar from './Sidebar';\n\nclass App extends Component {\n  render() {\n    return (\n      <Sidebar />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}